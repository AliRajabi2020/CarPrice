# -*- coding: utf-8 -*-
"""Copy of Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14VK-2Jo7qsm-MXj_QkMv9xRvqhlMbHFl

# import libraries
"""

import numpy as np
import pandas as pd
! pip install ydata_profiling
from ydata_profiling import ProfileReport

"""# read raw data"""

raw_data = pd.read_csv('CarPrice.csv')
raw_data.head()

def text_to_number(text):
    number_dict = {'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9, 'ten': 10, 'twelve': 12}
    return number_dict.get(text, text)

raw_data['doornumber'] = raw_data['doornumber'].map(text_to_number)
raw_data['cylindernumber'] = raw_data['cylindernumber'].map(text_to_number)

raw_data = raw_data.drop(raw_data.columns[0], axis=1)

raw_data.head()

"""# Statistical analysis of variables"""

raw_data.info()

raw_data['price'].describe()

profile = ProfileReport(raw_data)
profile.to_file("Car.html")

"""# Finding missing values"""

raw_data.isna().sum()

"""# Label Encoding

"""

def fueltype_to_number(text):
    number_dict = {'gas': 1, 'diesel': 2}
    return number_dict.get(text, text)

def aspiration_to_number(text):
    number_dict = {'std': 1, 'turbo': 2}
    return number_dict.get(text, text)

def carbody_to_number(text):
    number_dict = {'sedan': 1, 'hatchback': 2, 'wagon': 3, 'hardtop': 4, 'convertible': 5}
    return number_dict.get(text, text)

def drivewheel_to_number(text):
    number_dict = {'fwd': 1, 'rwd': 2, '4wd': 3}
    return number_dict.get(text, text)

def enginelocation_to_number(text):
    number_dict = {'front': 1, 'rear': 2}
    return number_dict.get(text, text)

def enginetype_to_number(text):
    number_dict = {'ohc': 1, 'ohcf': 2, 'ohcv': 3, 'l': 4,'dohc': 5,'I': 6,'rotor': 7,'dohcv': 8}
    return number_dict.get(text, text)

def fuelsystem_to_number(text):
    number_dict = {'mpfi': 1, '2bbl': 2, 'idi': 3, '1bbl': 4, 'spdi': 5, 'mfi': 6, 'spfi': 7, '4bbl': 8}
    return number_dict.get(text, text)

Label_Encoding = raw_data.copy()
Label_Encoding['fueltype'] = Label_Encoding['fueltype'].map(fueltype_to_number)
Label_Encoding['aspiration'] = Label_Encoding['aspiration'].map(aspiration_to_number)
Label_Encoding['carbody'] = Label_Encoding['carbody'].map(carbody_to_number)
Label_Encoding['drivewheel'] = Label_Encoding['drivewheel'].map(drivewheel_to_number)
Label_Encoding['enginelocation'] = Label_Encoding['enginelocation'].map(enginelocation_to_number)
Label_Encoding['enginetype'] = Label_Encoding['enginetype'].map(enginetype_to_number)
Label_Encoding['fuelsystem'] = Label_Encoding['fuelsystem'].map(fuelsystem_to_number)

Label_Encoding = Label_Encoding.drop(Label_Encoding.columns[1], axis=1)

"""# Correlation"""

import seaborn as sns
import matplotlib.pyplot as plt

correlations = Label_Encoding.corr()

plt.figure(figsize=(20,16))
sns.heatmap(correlations, annot=True, fmt=".2f", cmap='coolwarm', cbar=True)
plt.title('full correlation Matrix with Encoded Categories')
plt.show()

Price = raw_data['price']
correlations = Label_Encoding.corrwith(Price)
print(correlations)

plt.figure(figsize=(10, 6))
sns.barplot(x=correlations.index, y=correlations)
plt.xticks(rotation=45, ha='right')
plt.title('Correlations with Price')
plt.xlabel('Features')
plt.ylabel('Correlation')
plt.show()

"""# Handle Categoricals"""

table = pd.get_dummies(raw_data,columns=['symboling', 'doornumber','fueltype','aspiration','carbody','drivewheel','enginelocation',
                                         'enginetype','fuelsystem'],drop_first=True)

def TorF_to_number(text):
    number_dict = {'True': 1, 'False': 0}
    return number_dict.get(str(text), int)

columns_to_convert = range(16, 44)

for column_index in columns_to_convert:
    table.iloc[:, column_index] = table.iloc[:, column_index].map(TorF_to_number)

table = table.drop(table.columns[0], axis=1)
table.head()

from scipy.stats import pearsonr

binary_data = table.iloc[:, 15:44]
numeric_data = table['price']

correlations = {}
for column in binary_data.columns:
    correlation, p_value = pearsonr(binary_data[column], numeric_data)
    correlations[column] = correlation

for column, correlation in correlations.items():
    print(f"Correlation between {column} and price:", correlation)

table = table.drop("fuelsystem_mfi", axis=1)
table = table.drop("enginetype_rotor", axis=1)
table = table.drop("enginetype_ohcf", axis=1)
table = table.drop("fuelsystem_4bbl", axis=1)
table = table.drop("fuelsystem_spfi", axis=1)
table = table.drop("doornumber_4", axis=1)
table = table.drop("carbody_wagon", axis=1)
table = table.drop("enginetype_l", axis=1)
table = table.drop("fuelsystem_spdi", axis=1)
table = table.drop("symboling_0", axis=1)

"""# Finding Outliers"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(table['price'], kde=True)
plt.title('Price distribution with Outliers')
plt.show()
print("Skewness befor handling outlier: ", table['price'].skew())

Q1 = table['price'].quantile(0.25)
Q3 = table['price'].quantile(0.75)
IQR = Q3-Q1

lower_bound = Q1-1.5*IQR
upper_bound = Q3+1.5*IQR

#table['price'] = np.where(table['price']<lower_bound, lower_bound, table['price'])
#table['price'] = np.where(table['price']>upper_bound, upper_bound, table['price'])

sns.histplot(table['price'], kde=True)
plt.title('Adjusted Price distribution')
plt.show()
print("Skewness after handling outlier: ", table['price'].skew())

"""# Test and Train"""

X = table.drop(table.columns[14], axis=1)
y = table.iloc[:, 14]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

"""# Principle Component Analysis (PCA) for Data Visualization"""

import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
scaler.fit(X_train.iloc[:, :14])

X_train.iloc[:, :14] = scaler.transform(X_train.iloc[:, :14])
X_test.iloc[:, :14] = scaler.transform(X_test.iloc[:, :14])

pca = PCA(.95)

pca.fit(X_train.iloc[:, :14])
pca.n_components_

"""# Correlation of enginesize and horsepower with price


"""

import seaborn as sns
import matplotlib.pyplot as plt

sns.jointplot(x=X_train['horsepower'], y=y_train, kind='reg')
plt.xlabel('Horsepower')
plt.ylabel('Price')
plt.show()

sns.jointplot(x=X_train['enginesize'], y=y_train, kind='reg')
plt.xlabel('Engine Size')
plt.ylabel('Price')
plt.show()

"""# Picking the top ten features"""

from sklearn.feature_selection import SelectKBest, f_regression

k = 10

selector = SelectKBest(score_func=f_regression, k=k)

X_train_selected = selector.fit_transform(X_train, y_train)

selected_features = X_train.columns[selector.get_support()]

print("Selected Features:", selected_features)

"""# Model Linear Regression





"""

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train, y_train)

y_pred_train = model.predict(X_train)
y_pred_test = model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse_test = mean_squared_error(y_test, y_pred_test)
print("MSE on testing data:", mse_test)

from sklearn.metrics import r2_score
r2_test = r2_score(y_test, y_pred_test)
print("R^2 on test data:", r2_test)

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_train, y_train, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Training Data)')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_test, y_test, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Testing Data)')
plt.legend()
plt.show()

"""# Model Lasso Regression"""

from sklearn.linear_model import Lasso
from sklearn.metrics import mean_squared_error

lasso_model = Lasso(alpha=0.9)

lasso_model.fit(X_train, y_train)

y_pred_train = lasso_model.predict(X_train)
y_pred_test = lasso_model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse_test = mean_squared_error(y_test, y_pred_test)
print("MSE on testing data:", mse_test)

from sklearn.metrics import r2_score
r2_test = r2_score(y_test, y_pred_test)
print("R^2 on test data:", r2_test)

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_train, y_train, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Training Data)')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_test, y_test, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Testing Data)')
plt.legend()
plt.show()

"""# Model Ridge Regression"""

from sklearn.linear_model import Ridge
from sklearn.metrics import mean_squared_error

ridge_model = Ridge(alpha=0.1)

ridge_model.fit(X_train, y_train)

y_pred_train = ridge_model.predict(X_train)
y_pred_test = ridge_model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse_test = mean_squared_error(y_test, y_pred_test)
print("MSE on testing data:", mse_test)

from sklearn.metrics import r2_score
r2_test = r2_score(y_test, y_pred_test)
print("R^2 on test data:", r2_test)

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_train, y_train, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Training Data)')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_test, y_test, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Testing Data)')
plt.legend()
plt.show()

"""# Model SVR"""

from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error

svr_model = SVR(kernel='rbf', C=100000, epsilon=0.01, gamma='scale')

svr_model.fit(X_train, y_train)

y_pred_train = svr_model.predict(X_train)
y_pred_test = svr_model.predict(X_test)

from sklearn.metrics import mean_squared_error
mse_test = mean_squared_error(y_test, y_pred_test)
print("MSE on testing data:", mse_test)

from sklearn.metrics import r2_score
r2_test = r2_score(y_test, y_pred_test)
print("R^2 on test data:", r2_test)

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_train, y_train, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_train), max(y_train)], [min(y_train), max(y_train)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Training Data)')
plt.legend()
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_test, y_test, color='blue', label='Actual vs. Predicted')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.xlabel('Predicted Values')
plt.ylabel('Actual Values')
plt.title('Actual vs. Predicted Values (Testing Data)')
plt.legend()
plt.show()